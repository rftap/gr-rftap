# auto-generated by grc.converter

id: rftap_rftap_encap
label: RFtap Encapsulation
category: '[RFtap]'

parameters:
-   id: encapsulation_from
    label: Type
    dtype: enum
    default: '0'
    options: ['0', '1', '2', '3']
    option_labels: [From PDU "dlt" key, From PDU "dissector" key, Custom DLT, Custom
            dissector]
-   id: custom_dlt
    label: Data Link Type
    dtype: int
    default: '-1'
    hide: ${ ('none' if encapsulation_from == '2' else 'part') }
-   id: custom_dissector_name
    label: Dissector
    dtype: string
    hide: ${ ('none' if encapsulation_from == '3' else 'part') }

inputs:
-   domain: message
    id: in

outputs:
-   domain: message
    id: out

templates:
    imports: import rftap
    make: rftap.rftap_encap(${encapsulation_from}, ${custom_dlt}, ${custom_dissector_name})

documentation: |-
    Create RFTap packet from PDU data and metadata
    See: https://rftap.github.io/

    Data Link Type (DLT) can be provided from input PDUs, as "dlt" key (integer).

    Alternatively, dissector name can be provided from input PDUs, as "dissector" key (string).

    Alternatively, DLT can be specified in this block parameters (integer).

    Alternatively, dissector name can be specified in this block parameters (string).

    Data Link Types (integer):
    http://www.tcpdump.org/linktypes.html

    Dissector (String):
    Name of wireshark dissector (or name of your custom lua/c dissector)

file_format: 1
